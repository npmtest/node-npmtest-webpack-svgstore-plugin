{"/home/travis/build/npmtest/node-npmtest-webpack-svgstore-plugin/test.js":"/* istanbul instrument in package npmtest_webpack_svgstore_plugin */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-webpack-svgstore-plugin/lib.npmtest_webpack_svgstore_plugin.js":"/* istanbul instrument in package npmtest_webpack_svgstore_plugin */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_webpack_svgstore_plugin = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_webpack_svgstore_plugin = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-webpack-svgstore-plugin/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-webpack-svgstore-plugin && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_webpack_svgstore_plugin */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_webpack_svgstore_plugin\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_webpack_svgstore_plugin.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_webpack_svgstore_plugin.rollup.js'] =\n            local.assetsDict['/assets.npmtest_webpack_svgstore_plugin.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_webpack_svgstore_plugin.__dirname + '/lib.npmtest_webpack_svgstore_plugin.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-webpack-svgstore-plugin/node_modules/webpack-svgstore-plugin/src/svgstore.js":"'use strict';\n\n// Defaults\nconst defaults = {\n  svg: {\n    xmlns: 'http://www.w3.org/2000/svg',\n    style: 'position:absolute; width: 0; height: 0'\n  },\n  svgoOptions: {},\n  name: 'sprite.[hash].svg',\n  prefix: 'icon-',\n  template: __dirname + '/templates/layout.pug'\n};\n\n// Depends\nconst _ = require('lodash');\nconst path = require('path');\nconst utils = require('./helpers/utils');\nconst ConstDependency = require('webpack/lib/dependencies/ConstDependency');\nconst NullFactory = require('webpack/lib/NullFactory');\nconst async = require('async');\n\nclass WebpackSvgStore {\n\n  /**\n   * Constructor\n   * @param {string} input   [description]\n   * @param {string} output  [description]\n   * @param {object} options [description]\n   * @return {object}\n   */\n  constructor(options) {\n    this.tasks = {};\n    this.options = _.merge({}, defaults, options);\n  };\n\n  addTask(file, value) {\n    this.tasks[file] ? this.tasks[file].push(value) : (() => {\n        this.tasks[file] = [];\n        this.tasks[file].push(value);\n      })();\n  }\n\n  createTaskContext(expr, parser) {\n    const data = {\n      path: '/**/*.svg',\n      fileName: '[hash].sprite.svg',\n      context: parser.state.current.context\n    };\n\n    expr.init.properties.forEach(function (prop) {\n      switch (prop.key.name) {\n        case 'name':\n          data.fileName = prop.value.value;\n          break;\n        case 'path':\n          data.path = prop.value.value;\n          break;\n        default:\n          break;\n      }\n    });\n\n    data.fileName = utils.hash(data.fileName, parser.state.current.buildTimestamp);\n    let replacement = expr.id.name + ' = { filename: ' + \"__webpack_require__.p +\" + '\"' + data.fileName + '\" }';\n    let dep = new ConstDependency(replacement, expr.range);\n    dep.loc = expr.loc;\n    parser.state.current.addDependency(dep);\n    // parse repl\n    this.addTask(parser.state.current.request, data);\n  }\n\n  apply(compiler) {\n    // AST parser\n    compiler.plugin('compilation', (compilation, data) => {\n      \n      compilation.dependencyFactories.set(ConstDependency, new NullFactory());\n      compilation.dependencyTemplates.set(ConstDependency, new ConstDependency.Template());\n      \n      data.normalModuleFactory.plugin('parser', (parser, options) => {\n        parser.plugin('statement', (expr) => {\n          if (!expr.declarations || !expr.declarations.length) return;\n          const thisExpr = expr.declarations[0];\n          if (thisExpr.id.name === \"__svg__\") {\n            return this.createTaskContext(thisExpr, parser);\n          }\n        });\n      });\n    });\n\n\n    // save file to fs\n    compiler.plugin('emit', (compilation, callback) => {\n      async.forEach(Object.keys(this.tasks),\n        (key, outerCallback) => {\n          async.forEach(this.tasks[key],\n            (task, callback) => {\n              utils.filesMap(path.join(task.context, task.path || ''), (files) => {\n                // fileContent\n                const fileContent = utils.createSprite(\n                  utils.parseFiles(files, this.options), this.options.template);\n\n                // add sprite to assets\n                compilation.assets[task.fileName] = {\n                  size: function () {\n                    return Buffer.byteLength(fileContent, 'utf8');\n                  },\n                  source: function () {\n                    return new Buffer(fileContent);\n                  }\n                };\n                // done\n                callback();\n              });\n            }, outerCallback);\n        }, callback);\n    });\n\n    compiler.plugin('done', () => {\n      this.tasks = {};\n    });\n  }\n}\n\n\n/**\n * Return function\n * @type {[type]}\n */\nmodule.exports = WebpackSvgStore;\nmodule.exports.Options = WebpackSvgStore;\n","/home/travis/build/npmtest/node-npmtest-webpack-svgstore-plugin/node_modules/webpack-svgstore-plugin/src/helpers/utils.js":"'use strict';\n\n// Depends\nconst _ = require('lodash');\nconst fs = require('fs');\nconst path = require('path');\nconst util = require('util');\nconst crypto = require('crypto');\nconst pug = require('pug');\nconst Svgo = require('svgo');\nconst globby = require('globby');\nconst parse = require('htmlparser2');\n\n/**\n * Create sprite\n * @param  {object} data\n * @param  {string} template\n * @return {string}\n */\nconst _createSprite = function(data, template) {\n  return pug.renderFile(template, data);\n};\n\n/**\n * Depth log\n * @param  {object}   subject Consolable object or array\n * @param  {integer}  depth   Depth level\n * @return {void}\n */\nconst _log = function(subject, depth) {\n  console.log(util.inspect(subject, {\n    showHidden: true, depth: depth || 2\n  }));\n};\n\n/**\n * Fix ids\n * @param  {object} obj\n * @param  {string} id\n * @return {void}\n */\nconst _fixIds = function(obj, id) {\n  // add id\n  if (obj.attribs && obj.attribs.id) {\n    obj.attribs.id = [id, obj.attribs.id].join('-');\n  }\n  // add id to use tag\n  if (obj.name === 'use') {\n    obj.attribs['xlink:href'] = ['#' + id, obj.attribs['xlink:href'].replace('#', '')].join('-');\n  }\n};\n\n/**\n * Fix urls\n * @param  {object} obj\n * @param  {string} id\n * @return {void}\n */\nconst _fixUrls = function(obj, id) {\n  let key;\n  let match;\n  const json = obj.attribs;\n  if (json) {\n    for (key in json) {\n      if (json.hasOwnProperty(key)) {\n        match = /url\\(\\s*#([^ ]+?)\\s*\\)/g.exec(json[key]);\n        if (key && match) {\n          json[key] = 'url(#' + id + '-' + match[1] + ')';\n        }\n      }\n    }\n  }\n};\n\n/**\n * Svg parser\n * @param  {[type]} arr   [description]\n * @param  {[type]} id    [description]\n * @return {[type]}       [description]\n */\nconst _parseSVG = function(arr, id) {\n  const data = [];\n  arr.forEach(function(obj) {\n    if (obj) {\n      // add unic ids to urls\n      _fixUrls(obj, id);\n      // add ids\n      _fixIds(obj, id);\n      // go deeper if children exists\n      if (obj.children && obj.children.length > 0) {\n        _parseSVG(obj.children, id);\n      }\n      data.push(obj, id);\n    }\n  });\n\n  return data;\n};\n\n/**\n * Defs parser\n * @param  {[type]} id   [description]\n * @param  {[type]} data [description]\n * @return {[type]}      [description]\n */\nconst _defs = function(id, dom, data) {\n  // lets find defs into dom\n  const defs = _.filter(dom.children, { name: 'defs' });\n  const parseChilds = function(item, data) {\n    item.forEach(function(child) {\n      switch (child.name) {\n        case 'use': {\n          child.attribs['xlink:href'] = ['#' + id, child.attribs['xlink:href'].replace('#', '') ].join('-');\n        } break;\n        default:\n          child.attribs && child.attribs.id\n            ? child.attribs.id = [id, child.attribs.id].join('-')\n            : null;\n      }\n\n      if (child && child.children && child.children.length > 0) {\n        parseChilds(child.children, data);\n      }\n\n      if (child && child.attribs && child.attribs.id) {\n        data.push(child);\n      }\n    });\n  };\n\n  defs.forEach(function(item) {\n    if (item.children && item.children.length > 0) {\n      parseChilds(item.children, data);\n    }\n  });\n\n  return data;\n};\n\n/**\n * Symbols parser\n * @param  {[type]} id   [description]\n * @param  {[type]} data [description]\n * @return {[type]}      [description]\n */\nconst _symbols = function(id, dom, data, prefix) {\n  // create symbol object\n  const symbol = {\n    type: 'tag',\n    name: 'symbol',\n    attribs: {\n      viewBox: dom.attribs.viewBox,\n      id: prefix + id\n    },\n    next: null,\n    prev: null,\n    parent: null\n  };\n\n  // add dom children without defs and titles\n  symbol.children = _.filter(dom.children, function(obj) {\n    return obj.name !== 'defs' && obj.name !== 'title';\n  });\n\n  // go through the svg element\n  _parseSVG(symbol.children, id);\n\n  // push symbol data\n  data.push(symbol);\n\n  return data;\n};\n\n/**\n * Convert filename to id\n * @param  {string} filename [description]\n * @return {string}          [description]\n */\nconst _convertFilenameToId = function(filename) {\n  return filename.split('.').join('-').toLowerCase();\n};\n\n/**\n * Build files map\n * @param  {string} input Destination path\n * @return {array}        Array of paths\n */\nconst _filesMap = function(input, cb) {\n  const data = input;\n\n  globby(data).then(function(fileList) {\n    cb(fileList);\n  });\n};\n\n/**\n * Parse dom objects\n * @param  {[type]} dom [description]\n * @return {[type]}     [description]\n */\nconst _parseDomObject = function(data, filename, dom, prefix) {\n  const id = _convertFilenameToId(filename);\n  if (dom && dom[0]) {\n    _defs(id, dom[0], data.defs);\n    _symbols(id, dom[0], data.symbols, prefix);\n  }\n\n  return data;\n};\n\n/**\n * Minify via SVGO\n * @param  {string}   file  filename\n * @param  {integer}  loop  loop count\n * @return {[type]}         minified source\n */\nconst _minify = function(file, svgoOptions) {\n  const min = new Svgo(svgoOptions);\n  let source = file;\n\n  function svgoCallback(result) {\n    source = result.data;\n  }\n\n  min.optimize(source, svgoCallback);\n\n  return source;\n};\n\n/**\n * [parseFiles description]\n * @return {[type]} [description]\n */\nconst _parseFiles = function(files, options) {\n  const self = this;\n  let data = {\n    svg: options.svg,\n    defs: [],\n    symbols: []\n  };\n\n  // each over files\n  files.forEach(function(file) {\n    // load and minify\n    const buffer = _minify(fs.readFileSync(file, 'utf8'), options.svgoOptions);\n    // get filename for id generation\n    const filename = path.basename(file, '.svg');\n\n    const handler = new parse.DomHandler(function(error, dom) {\n      if (error) self.log(error);\n      else data = _parseDomObject(data, filename, dom, options.prefix);\n    });\n\n    // lets create parser instance\n    const Parser = new parse.Parser(handler, {\n      xmlMode: true\n    });\n    Parser.write(buffer);\n    Parser.end();\n  });\n\n  return data;\n};\n\n/**\n * [_hash description]\n * @param  {[type]} buffer [description]\n * @param  {[type]} name   [description]\n * @return {[type]}        [description]\n */\nconst _hash = function(str, hash) {\n  return str.indexOf('[hash]') >= 0\n    ? str.replace('[hash]', hash)\n    : str;\n};\n\n/**\n * Create hash\n * @param  {[type]} buffer [description]\n * @param  {[type]} name   [description]\n * @return {[type]}        [description]\n */\nmodule.exports.hash = _hash;\n\n/**\n * Deep log util\n * @param  {[type]} subject [description]\n * @return {[type]}         [description]\n */\nmodule.exports.log = _log;\n\n/**\n * Parse file with htmlparser\n * @return {[type]} [description]\n */\nmodule.exports.parseFiles = _parseFiles;\n\n/**\n * Build files map\n * @param  {string} input Destination path\n * @return {array}        Array of paths\n */\nmodule.exports.filesMap = _filesMap;\n\n/**\n * Parse dom objects\n * @param  {[type]} dom [description]\n * @return {[type]}     [description]\n */\nmodule.exports.parseDomObject = _parseDomObject;\n\n/**\n * Fixing id inside each selector\n * @param  {[type]} subject [description]\n * @return {[type]}         [description]\n */\nmodule.exports.fixIds = _fixIds;\n\n/**\n * Fixing url inside each svg\n * @param  {[type]} subject [description]\n * @return {[type]}         [description]\n */\nmodule.exports.fixUrls = _fixUrls;\n\n/**\n * Simple SVG parser\n * @param  {[type]} subject [description]\n * @return {[type]}         [description]\n */\nmodule.exports.parseSVG = _parseSVG;\n\n/**\n * [convertFilenameToId description]\n * @type {[type]}\n */\nmodule.exports.convertFilenameToId = _convertFilenameToId;\n\n/**\n * Defs parser\n * @param  {[type]} id   [description]\n * @param  {[type]} data [description]\n * @return {[type]}      [description]\n */\nmodule.exports.defs = _defs;\n\n/**\n * Symbols parser\n * @param  {[type]} id   [description]\n * @param  {[type]} data [description]\n * @return {[type]}      [description]\n */\nmodule.exports.symbols = _symbols;\n\n/**\n * Minify via SVGO\n * @param  {string}   file  filename\n * @param  {integer}  loop  loop count\n * @return {[type]}         minified source\n */\nmodule.exports.minify = _minify;\n\n/**\n * Sprite creation\n * @param  {[type]} files [description]\n * @return {[type]}       [description]\n */\nmodule.exports.createSprite = _createSprite;\n","/home/travis/build/npmtest/node-npmtest-webpack-svgstore-plugin/node_modules/webpack-svgstore-plugin/webpack.config.js":"'use strict';\n\n/**\n * [config description]\n * @type {Object}\n */\nvar _configs = {\n  platform: require(__dirname + '/platform/global')\n};\n\n/**\n * Load webpack config via enviroments\n * @param  {[type]} enviroment [description]\n * @return {[type]}            [description]\n */\nvar _load = function(environment) {\n  // check enviroment\n  if (!environment) throw 'Can\\'t find local environment variable via process.env.NODE_ENV';\n  if (!_configs[environment]) throw 'Can\\'t find enviroments see _configs object';\n\n  // load config file by enviroment\n  return _configs[environment](__dirname);\n};\n\n/**\n * Export WebPack config\n * @type {[type]}\n */\nmodule.exports = _load(process.env.NODE_ENV);\n","/home/travis/build/npmtest/node-npmtest-webpack-svgstore-plugin/node_modules/webpack-svgstore-plugin/platform/global.js":"'use strict';\n\n// Depends\nvar path = require('path');\nvar SvgStore = require('../src/svgstore');\n\nmodule.exports = function(_path) {\n  // define local variables\n  var distPath = path.join(_path, 'platform', 'dist');\n\n  return {\n    entry: {\n      app: path.join(_path, 'platform', 'static', 'js', 'index.js')\n    },\n    output: {\n      path: distPath,\n      filename: '[chunkhash].[name].js',\n      chunkFilename: '[chunkhash].[id].js',\n      publicPath: '/platform/'\n    },\n    resolve: {\n      extensions: ['', '.js'],\n    },\n    plugins: [\n      // create svgStore instance object\n      new SvgStore.Options({\n        // svgo options\n        svgoOptions: {\n          plugins: [\n            { removeTitle: true }\n          ]\n        }\n      })\n    ]\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-webpack-svgstore-plugin/node_modules/webpack-svgstore-plugin/src/helpers/svgxhr.js":"/**\n * Load svg via ajax\n * @param  {string} url path to svg sprite\n * @generator: webpack-svgstore-plugin\n * @see: https://www.npmjs.com/package/webpack-svgstore-plugin\n * @return {[type]}     [description]\n */\nvar svgXHR = function(options) {\n  var url = false;\n  var baseUrl = undefined;\n\n  options && options.filename\n    ? url = options.filename\n    : null;\n\n  if (!url) return false;\n  var _ajax = new XMLHttpRequest();\n  var _fullPath;\n\n  if (typeof XDomainRequest !== 'undefined') {\n    _ajax = new XDomainRequest();\n  }\n\n  if (typeof baseUrl === 'undefined') {\n    if (typeof window.baseUrl !== 'undefined') {\n      baseUrl = window.baseUrl;\n    } else {\n      baseUrl = window.location.protocol + '//' + window.location.hostname + (window.location.port ? ':' + window.location.port : '');\n    }\n  }\n\n  _fullPath = (baseUrl + '/' + url).replace(/([^:]\\/)\\/+/g, '$1');\n  _ajax.open('GET', _fullPath, true);\n  _ajax.onprogress = function() {};\n  _ajax.onload = function() {\n    if(!_ajax.responseText || _ajax.responseText.substr(0, 4) !== \"<svg\") {\n      throw Error(\"Invalid SVG Response\");\n    }\n    if(_ajax.status < 200 || _ajax.status >= 300) {\n      return;\n    }\n    var div = document.createElement('div');\n    div.innerHTML = _ajax.responseText;\n    document.body.insertBefore(div, document.body.childNodes[0]);\n  };\n  _ajax.send();\n};\n\nmodule.exports = svgXHR;\n"}